---------------------Base Class--------------------

#include <iostream>
using namespace std;

#include <iostream>
using namespace std;

#include <iostream> using namespace std;
const float PI = 3.14;

class Shape{
    float xC, yC;
    public: 
    Shape(float x, float y){
        xC = x;
        yC = y;
    }

    void PrintCenter(){
        cout << "Center is (" << xC << ", " << yC << ")" << endl;
    }

};

class Circle: public Shape{
    float radius;
    public:
    Circle(float x, float y, float r): Shape(x,y){
        radius = r;
    }

    float area(){
        return PI * radius * radius;
    }
    void PrintArea(){
        cout << "Area is " << area() << endl;
    }

};

int main(){
    
    Shape F(2,5);
    F.PrintCenter();

    Circle C(20,30,7);
    C.PrintCenter();
    C.PrintArea();

    return 0;
    }


---------------------Member Access--------------------

#include <iostream>
using namespace std;


class Shape{
    double width;
    double height;
public:
    void showDim(){
        cout << "Width and height are " << width << " and " << height << endl;
    }
    void setDim(double w, double h){
        width = w;
        height = h;
    }

    double accessw(){
        return width;
    }
    double accessh(){
        return height;
    }
    


};


class Triangle: public Shape{
    public:
    double width = accessw();
    double height = accessh();

    char Type[20];
    double area(){
        return width * height / 2;
    }
    void showType(){
        cout << "Type is " << Type << endl;
    }
};


---------------------Constructor Inheritance--------------------

#include <iostream>
using namespace std;

#include <iostream> using namespace std;
const float PI = 3.14;

class Shape{
    float xC, yC;
    public: 
    void setCenter(float x, float y){
        xC = x;
        yC = y;
    }
    void setx(float x){
        xC = x;
    }
    void sety(float y){
        yC = y;
    }
    float getx(){
        return xC;
    }
    float gety(){
        return yC;
    }
    void PrintCenter(){
        cout << "Center is (" << xC << ", " << yC << ")" << endl;
    }

};

class Circle: public Shape{
    float radius;
    public:
    Circle(float x, float y, float r){
        setx(x);
        sety(y);
        radius = r;
    }
    float area(){
        return PI * radius * radius;
    }
    void PrintArea(){
        cout << "Area is " << area() << endl;
    }

};

int main(){
    Shape F;
    F.setx(2);
    F.sety(5);
    F.PrintCenter();

    Circle C(20,30,7);
    C.PrintCenter();
    C.PrintArea();
    

    return 0;
    }

    ---------------------Person Class--------------------

    #include <iostream>
using namespace std;

class Person{ 
  protected:

  string name;

  public:
  friend class Student;
  friend class Professor;

  // Creating Person constructor
  Person(string n) {name = n;}
  void print() { cout << "Person Name is " << name << "." <<endl;}
  
};

class Student: public Person{
  protected:

  float score;

  public:
  // Creating Student constructor and appending score as a new attribute
  Student(string n, float s) : Person(n){score = s;}
  void print() {cout << "Student Name is " <<name<< " and score is " << score << "." <<endl;}
};

class Professor: public Person{ 
  protected:

  int yearsev;

  public:
    // Creating Professor constructor and appending yearsev as a new attribute
  Professor(string n, int y) : Person(n){ yearsev = y;}

  void print() {cout<<"Professor Name is "<<name<<" and has "<<yearsev<<" years of service."<<endl;};
};

int main() {
  Person x("Mario");
  x.print();
  Student y("Ugo", 8.5);
  y.print();
  Professor z("Tom", 5);
  z.print();
}


    ---------------------Virtual Person Class--------------------

    #include <iostream>
using namespace std;

class Person{ 
  protected:

  string name;

  public:
  friend class Student;
  friend class Professor;

  // Creating Person constructor
  Person(string n) {name = n;}
  virtual void print() { cout << "Person Name is " << name << "." <<endl;}
  
};

class Student: public Person{
  protected:

  float score;

  public:
  // Creating Student constructor and appending score as a new attribute
  Student(string n, float s) : Person(n){score = s;}
  void print() {cout << "Student Name is " <<name<< " and score is " << score << "." <<endl;}
};

class Professor: public Person{ 
  protected:


  int yearsev;

  public:
    // Creating Professor constructor and appending yearsev as a new attribute
  Professor(string n, int y) : Person(n){ yearsev = y;}

  void print() {cout<<"Professor Name is "<<name<<" and has "<<yearsev<<" years of service."<<endl;};
};

int main() {

  Person x("Mario");
  Person *p;
  p = &x;
  p->print();



  Student y("Ugo", 8.5);
  p = &y;
  p->print();



  Professor z("Tom", 5);
  p = &z;
  p->print();
  
}
